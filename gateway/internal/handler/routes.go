// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	auth "github/yguilai/timetable-micro/gateway/internal/handler/auth"
	captcha "github/yguilai/timetable-micro/gateway/internal/handler/captcha"
	user "github/yguilai/timetable-micro/gateway/internal/handler/user"
	"github/yguilai/timetable-micro/gateway/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/auth/tokenRefresh",
				Handler: auth.TokenRefreshHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/emailSend",
				Handler: user.EmailSendHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/emailExist",
				Handler: user.EmailExistHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/:id",
				Handler: user.UserInfoHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: captcha.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/captcha/verify",
				Handler: captcha.CaptchaVerifyHandler(serverCtx),
			},
		},
	)
}
