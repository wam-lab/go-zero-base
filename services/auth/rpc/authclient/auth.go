// Code generated by goctl. DO NOT EDIT!
// Source: auth.proto

//go:generate mockgen -destination ./auth_mock.go -package authclient -source $GOFILE

package authclient

import (
	"context"

	"github/yguilai/timetable-micro/services/auth/rpc/auth"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	JwtVerifyReq   = auth.JwtVerifyReq
	JwtRefreshResp = auth.JwtRefreshResp
	Token          = auth.Token
	Response       = auth.Response
	Claim          = auth.Claim
	JwtCreateReq   = auth.JwtCreateReq
	JwtCreateResp  = auth.JwtCreateResp
	JwtVerifyResp  = auth.JwtVerifyResp
	JwtRefreshReq  = auth.JwtRefreshReq
	Request        = auth.Request

	Auth interface {
		Ping(ctx context.Context, in *Request) (*Response, error)
		Create(ctx context.Context, in *JwtCreateReq) (*JwtCreateResp, error)
		Verify(ctx context.Context, in *JwtVerifyReq) (*JwtVerifyResp, error)
		Refresh(ctx context.Context, in *JwtRefreshReq) (*JwtRefreshResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

func (m *defaultAuth) Ping(ctx context.Context, in *Request) (*Response, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Ping(ctx, in)
}

func (m *defaultAuth) Create(ctx context.Context, in *JwtCreateReq) (*JwtCreateResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Create(ctx, in)
}

func (m *defaultAuth) Verify(ctx context.Context, in *JwtVerifyReq) (*JwtVerifyResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Verify(ctx, in)
}

func (m *defaultAuth) Refresh(ctx context.Context, in *JwtRefreshReq) (*JwtRefreshResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Refresh(ctx, in)
}
