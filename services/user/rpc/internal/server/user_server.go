// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package server

import (
	"context"

	"github.com/yguilai/timetable-micro/services/user/rpc/internal/logic"
	"github.com/yguilai/timetable-micro/services/user/rpc/internal/svc"
	"github.com/yguilai/timetable-micro/services/user/rpc/user"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Ping(ctx context.Context, in *user.PingReq) (*user.PongResp, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *UserServer) Register(ctx context.Context, in *user.RegisterReq) (*user.RegisterResp, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

func (s *UserServer) Login(ctx context.Context, in *user.LoginReq) (*user.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) EmailSend(ctx context.Context, in *user.EmailSendReq) (*user.EmailSendResp, error) {
	l := logic.NewEmailSendLogic(ctx, s.svcCtx)
	return l.EmailSend(in)
}

func (s *UserServer) EmailExist(ctx context.Context, in *user.EmailExistReq) (*user.EmailExistResp, error) {
	l := logic.NewEmailExistLogic(ctx, s.svcCtx)
	return l.EmailExist(in)
}
